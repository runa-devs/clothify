// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  tryOnResults  TryOnResult[]
  tryOnJobs     TryOnJob[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Item {
  id          String        @id @default(cuid())
  name        String
  imageUrl    String
  description String?
  price       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@map("items")
}

model TryOnResult {
  id              String   @id @default(cuid())
  shareId         String   @unique
  sourceKey       String   // key of the selfie image in S3
  resultKey       String   // key of the result image in S3
  itemId          String?  // if try-on created from catalog, itemId is set
  userId          String?  // generated on server side with nanoid
  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  isPublic        Boolean  @default(false)
  createdAt       DateTime @default(now())
  
  @@map("try_on_results")
}

model TryOnJob {
  id              String    @id @default(cuid())
  sourceKey       String    // key of the selfie image in S3
  costumeKey      String    // key of the costume image in S3
  category        String    // category of the costume
  status          String    // PENDING, PROCESSING, COMPLETED, FAILED
  error           String?   // error message if status is FAILED
  userId          String    
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("try_on_jobs")
}